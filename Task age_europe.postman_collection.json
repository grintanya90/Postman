{
	"info": {
		"_postman_id": "7c1cbe3a-9d78-4190-8498-acc1893324df",
		"name": "Task age_europe",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Boundary value tests (europe)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Boundary value tests (europe)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   \r",
							"\r",
							"if (jsonData.age >=0 && jsonData.age <=17){\r",
							"\r",
							"    pm.test(\"Body contains age_type underage\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"underage\");\r",
							"\r",
							"    });\r",
							"}\r",
							"else if (jsonData.age >=18 && jsonData.age <=49){\r",
							"\r",
							"    pm.test(\"Body contains age_type adult\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"adult\");\r",
							"});\r",
							"}\r",
							"else if (jsonData.age >=50 && jsonData.age <=100){\r",
							"\r",
							"   pm.test(\"Body contains age_type antiquity\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"antiquity\");\r",
							"});\r",
							"}\r",
							"else {\r",
							"    console.log( 'out of bounds')\r",
							"}})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://116.203.27.46:5002/age_europe",
					"protocol": "http",
					"host": [
						"116",
						"203",
						"27",
						"46"
					],
					"port": "5002",
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "check 0-17",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test (\"Schema is correct\", ()=>{\r",
							"    let jsonData = JSON.parse (responseBody);\r",
							"    pm.expect(tv4.validate (jsonData, schema)).to.be.true\r",
							"\r",
							"})\r",
							"pm.test(\"test equivalence classes \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.eql(\"underage\");\r",
							"});\r",
							"\r",
							"pm.test(\"number of films\", function() {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.content.length).to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "3",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://116.203.27.46:5002/age_europe",
					"protocol": "http",
					"host": [
						"116",
						"203",
						"27",
						"46"
					],
					"port": "5002",
					"path": [
						"age_europe"
					]
				}
			},
			"response": []
		},
		{
			"name": "check 18-49",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test (\"Schema is correct\", ()=>{\r",
							"    let jsonData = JSON.parse (responseBody);\r",
							"    pm.expect(tv4.validate (jsonData, schema)).to.be.true\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"test equivalence classes\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.eql(\"adult\");\r",
							"});\r",
							"\r",
							"pm.test(\"number of films\", function() {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.content.length).to.eql(17);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "49",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://116.203.27.46:5002/age_europe",
					"protocol": "http",
					"host": [
						"116",
						"203",
						"27",
						"46"
					],
					"port": "5002",
					"path": [
						"age_europe"
					]
				}
			},
			"response": []
		},
		{
			"name": "check 50-100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test (\"Schema is correct\", ()=>{\r",
							"    let jsonData = JSON.parse (responseBody);\r",
							"    pm.expect(tv4.validate (jsonData, schema)).to.be.true\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"test equivalence classes\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.eql(\"antiquity\");\r",
							"});\r",
							"\r",
							"pm.test(\"number of films\", function() {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.content.length).to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "80",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://116.203.27.46:5002/age_europe",
					"protocol": "http",
					"host": [
						"116",
						"203",
						"27",
						"46"
					],
					"port": "5002",
					"path": [
						"age_europe"
					]
				}
			},
			"response": []
		}
	]
}